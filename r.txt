




let room_name = window.location.href.split('/')[4]
let in_prison = false
const colors = ['rgba(255, 0, 0, 0.5)', 'green', 'yellow', 'blue']
let players_positions = [1,1,1,1,0]
let current_player = 0
const player_id = document.getElementById("user").innerText
const player_number = parseInt(document.querySelector('.color').innerText)
const player_money = document.getElementById(`player${player_number}`).children[2]
let count_doubles = 0;
let count_roll_in_prison = 0;
let monopoly = []
let companies = []
let pawns = []
let auction_players
let players = []
let players_count=0;
const max_players = document.querySelector('.players').children.length

const monopolies = {
    0: [1,3],
    1: [4,12,28],
    2: [5,15,25,35],
    3: [6,8,9],
    4: [11,13,14],
    5: [16,18,19],
    6: [21,23,24],
    7: [26,27,29],
    8: [31,32,34],
    9: [37,39],
}

function getCookie(name) {
    var value = "; " + document.cookie;
    var parts = value.split("; " + name + "=");
    if (parts.length == 2) return parts.pop().split(";").shift();
    }

function absdiv(a,b) {
    let result = a%b
    if (result < 0) result+=b
    return result
}

function next_player() {
    current_player  = players[(players.indexOf(current_player)+1)%players_count]
}

function get_cell(cell_pos) {
    return new Promise((resolve, reject) => {
        fetch(`http://127.0.0.1:8000/api/cells/get_cell/${room_name}/${cell_pos}/`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken'),
            },
        })
        .then(response => response.json())
        .then(data => {
            console.log(data);
            resolve(data);
        })
        .catch(error => {
            console.error('Error:', error);
            reject(error);
        });
    });
}

document.getElementsByClassName('close')[0].addEventListener('click', function() {
    document.getElementById('myModal').style.display = 'none';
});

function formatTime(time) {
    return String(time).padStart(2, '0');
}
let seconds = 0;
let minutes = 0;
let hours = 0;
function updateGameTime() {
    seconds++;
    if (seconds >= 60) {
        seconds = 0;
        minutes++;
        if (minutes >= 60) {
            minutes = 0;
            hours++;
            if (hours >= 24) {
                hours = 0;
            }
        }
    }
    document.getElementById('gameTime').innerHTML = formatTime(hours) + ':' + formatTime(minutes) + ':' + formatTime(seconds);
}



setInterval(updateGameTime, 1000);

let url = window.location.href.substring(7, 22) + 'ws/' +window.location.href.substring(22)
const chatSocket = new WebSocket(`ws://${url}`);


document.getElementById('send-button').onclick = function() {

    const messageInputDom = document.getElementById('message-input');
    const message = messageInputDom.value;
    chatSocket.send(JSON.stringify({
        'type':'chat_message',
        'message':message}));
    messageInputDom.value = '';
};

const presenceEl = document.getElementById('pre_cnt');
const messageOutput = document.getElementById('message-output');

chatSocket.onopen = (event) => {
    console.log('test')
    // if (parseInt(players_count)===max_players)start();
     hours = sessionStorage.getItem('hours')
    minutes = sessionStorage.getItem('minutes')
    seconds = sessionStorage.getItem('seconds')
}

chatSocket.onclose = (event) => {
    sessionStorage.setItem('hours', `${hours}`)
    sessionStorage.setItem('minutes', `${minutes}`)
    sessionStorage.setItem('seconds', `${seconds}`)
}

chatSocket.onmessage = (event) => {
    users_update()
    let data = JSON.parse(event.data)
    presenceEl.innerHTML = data.online;
    players_count = parseInt(data.online);
    console.log(players_count, max_players)
    if (data.type==='start') start()
    else if (data.type === 'chat_message') {
        if (data.next_player) {
            if (!count_doubles) next_player();
            document.querySelector('.menu').style.display = player_number===current_player ? 'block' : 'none'
        }
        messageOutput.innerHTML += '<p>' + data.message + '</p>';
    }

    else if (data.type=== 'move_player') {
        move_player(data.dices)

    }

    else if (data.type=== 'buy_company') {
        view_for_buy_company(data.cell_pos)
    }
    else if (data.type==='prison') {
        prison()
        current_player = (current_player+1)%players_count;
    }
     else if (data.type==='display_window') {
       document.querySelector('.menu').style.display = 'block'
    }
     else if (data.type==='auction') {
        document.querySelector('.auction-price').innerText = Number(data.price)+100
        const modal = document.getElementById('auction')
         const btn_cancel = document.querySelector('.auction-cancel')
         const btn_success =  document.querySelector('.auction-succes')
        modal.style.display = 'block'
        auction_players = data.auction_players
        function cancel() {
            modal.style.display = 'none'
             auction_players = auction_players.filter(element => element !== player_number)
             if (auction_players.length===1 && data.auction_players_count>=players_count-1) {
                 chatSocket.send(JSON.stringify({
                    'type':'chat_message',
                    'message':`buy ${auction_players[0]}`}));
                 auction_buy(data.price, auction_players[0], data.cell)
             }
             else if (auction_players.length===0) {
                 chatSocket.send(JSON.stringify({
                    'type':'chat_message',
                    'message':`nobody buy`}));
             }
             else {
                 chatSocket.send(JSON.stringify({
                'type': 'auction',
                'target': auction_players[(auction_players.indexOf(data.target)+1)%auction_players.length],
                'auction_players': auction_players,
                 'auction_players_count': data.auction_players_count+1,
                'cell':data.cell,
                'price': data.price
    }));
             }
             this.removeEventListener('click', cancel)
            btn_success.removeEventListener('click', up)
        }
        btn_cancel.addEventListener('click', cancel)
        function up() {
             modal.style.display = 'none'
            if (auction_players.length===1 && data.auction_players_count>=players_count-1) {
                 chatSocket.send(JSON.stringify({
                    'type':'chat_message',
                    'message':`buy ${auction_players[0]}`}));
                auction_buy(data.price, auction_players[0], data.cell)
                return
            }
             chatSocket.send(JSON.stringify({
                'type': 'auction',
                'target': auction_players[(auction_players.indexOf(data.target)+1)%auction_players.length],
                'auction_players': auction_players,
                 'auction_players_count': data.auction_players_count+1,
                'cell':data.cell,
                'price': data.price+100
    }));
            this.removeEventListener('click', up);
              btn_cancel.removeEventListener('click', cancel)
        }
        btn_success.addEventListener('click', up)
    }
     else if (data.type==='deal_suggest') {
       console.log(data)
        const deal_data = data
        const user_cells = document.querySelectorAll('.deal-company')[2]
        const enemy_cells = document.querySelectorAll('.deal-company')[3]
        const modal = document.getElementById('deal-suggest')
        modal.style.display = 'block'
        user_cells.innerHTML = deal_data.my_companies
        enemy_cells.innerHTML = deal_data.enemy_companies
        console.log(document.querySelectorAll('.deal-money-left')[1])
        document.querySelectorAll('.deal-suggest-money')[0].innerText = deal_data.my_money
        document.querySelectorAll('.deal-suggest-money')[1].innerText = deal_data.enemy_money
        document.querySelectorAll('.deal-money-left')[1].innerText = deal_data.all_my_money
        document.querySelectorAll('.deal-money-right')[1].innerText = deal_data.all_enemy_money
        // deal_accept();
        const deal_btn = document.querySelector('.deal-accept')

        deal_btn.addEventListener('click', function (){
            console.log(data.enemy_cells)
            chatSocket.send(JSON.stringify({
            'type':'deal_accept',
                'player':data.player,
            'my_companies':data.my_companies,
            'enemy_companies':data.enemy_companies,
            'enemy': data.enemy}));
            // chatSocket.send(`8 ${data.player_cells} ${data.enemy_cells} ${data.enemy}`)
            modal.style.display = 'none'
             let Data = {
                room_name: room_name,
                player_money:deal_data.all_my_money,
                enemy_money:deal_data.all_enemy_money,
                 player_cells:deal_data.my_companies,
                 enemy_cells:deal_data.enemy_companies,
                 enemy:deal_data.enemy
                };
            fetch('../../game/deal/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken')
                },
                body: JSON.stringify(Data)
            })
                .then(response => response.json())
                .then(dat => {

                    // chatSocket.send(`1 ${dat.message}`)
                    chatSocket.send(JSON.stringify({
            'type':'chat_message',
            'message': `${data.enemy} 'согласился на сделку`}));
                    console.log(dat);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        })
        users_update()
    }
     else if (data.type==='deal_accept') {
         data.my_companies.forEach(id => {
                let cell = document.getElementById(`cell${id}`)
                cell.style.background = colors[data.enemy]
            })
        data.enemy_companies.forEach(id => {
                let cell = document.getElementById(id)
                cell.style.background = colors[data.player]
            })
    }




};

function view_for_buy_company(cell_pos) {
    let cell = document.getElementById(`cell${cell_pos}`)
    cell.style.background = colors[current_player];
    cell.title = `${current_player}`
    cell.children[1].children[1].children[0].innerText = parseInt(cell.children[1].children[1].children[0].innerText)/10
    users_update()
}

function auction_buy(price, player, cell) {
    chatSocket.send(JSON.stringify({
            'type':'buy_company',
            'cell_pos': cell}));
    let data = {
        cell: cell,
        room_name: room_name,
        price: price,
        player: player,
    };

    fetch(`http://127.0.0.1:8000/game/buy_company/`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(dat => {
        if (data.cells) data.cells.split(' ').forEach(id => {
            // update_cell(id);
        })
        console.log(dat);

        // monopoly = []
        // if (data.message) for (let i in data.message.split(' ')) monopoly.push(parseInt(data.message.split(' ')[i]))
        // console.log(monopoly)
        //  if (monopoly.length>0) {
        //     document.querySelector('.build').style.background = 'white';
        // }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}


function prison() {
    const chip = document.getElementById(`chip${current_player + 1}`);
    let buy = document.querySelector('.prison-buy');
    buy.style.background = 'white';
    let elementToMoveRect = chip.getBoundingClientRect();
    const computedStyles = window.getComputedStyle(chip);
    const transformValue = computedStyles.getPropertyValue('transform');
    const matrix = new DOMMatrix(transformValue);
    const translateX = matrix.m41;
    const translateY = matrix.m42;
    let startX = elementToMoveRect.left -translateX + (elementToMoveRect.width / 2);
    let startY =elementToMoveRect.top - translateY  + (elementToMoveRect.height / 2);
    let targetRect = document.getElementById(`cell${10}`).getBoundingClientRect();
    let targetCenterX = targetRect.left + (targetRect.width / 2);
    let targetCenterY = targetRect.top + (targetRect.height / 2);

    let deltaX = targetCenterX - startX;
    let deltaY = targetCenterY - startY;

    chip.style.transition = 'transform 1s ease-in-out';
    chip.style.transform = `translate(${deltaX}px, ${deltaY}px)`;
    players_positions[current_player] = 10;
}

document.querySelector('.prison-buy').onclick = function () {
    let data = {
                'active': parseInt(document.getElementById(`player${current_player}`).children[2].innerText)-1000,
            };
            let message =   'выкупил себя'
            chatSocket.send(JSON.stringify({
            'type':'chat_message',
            'message':message}));
            fetch(`http://127.0.0.1:8000/api/players/${player_id}/`,{
                     method: 'PUT',
                     headers: {
                         'Content-Type': 'application/json',
                         'X-CSRFToken': getCookie('csrftoken')
                     },
                     body: JSON.stringify(data)
                 })
                     .then(response => response.json())
                     .then(data => {
                         users_update()
                         console.log(data);
                         in_prison = false;
                         let buy = document.querySelector('.prison-buy');
                         buy.style.background = 'black';

                     })
                     .catch(error => {
                         console.error('Error:', error);
                     });
}

function openModalBuild() {
    const modal = document.getElementById("myModal2");
    modal.style.display = "block";
    let cells =[];
    for (let i in monopoly) {
        cells.push(monopolies[monopoly[i]]);
    }
    cells = [].concat(...cells);
    cells.forEach(id => {
        let company = document.getElementById(`cell${id}`)
        company.style.zIndex = '2';

         company.onclick = function () {
             company.children[1].innerHTML += '<div class="star">&#9733;</div>';
             console.log(company)
            let data = {
                    room_name: room_name,
                    cell: id
                     };
                fetch('../../game/build/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': getCookie('csrftoken')
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(data => {
                        update_cell(data.message)
                        users_update()
                        console.log(data);
                        // stars = true;
                        document.querySelector('.sell').style.background = 'white';
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
         }
    })
    window.onclick = function(event) {
    var modal = document.getElementById("myModal2");
    if (event.target === modal) {
        modal.style.display = "none";
         cells.forEach(id => {
        let company = document.getElementById(`cell${id}`)
        company.style.zIndex = '0';
        company.onclick = NaN;

    })
    }
}
}

function openModalSell() {
    var modal = document.getElementById("myModal2");
    modal.style.display = "block";
    let cells =[];
    for (let i in monopoly) {
        cells.push(monopolies[monopoly[i]]);
    }
    cells = [].concat(...cells);
    cells.forEach(id => {
        let company = document.getElementById(`cell${id}`)
        company.style.zIndex = '2';

         company.onclick = function () {
             company.children[1].children[2].remove();
             console.log(company)
            let data = {
                    room_name: room_name,
                    cell: id
                     };
                fetch('../../game/sell/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': getCookie('csrftoken')
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(data => {
                        update_cell(data.message)
                        users_update()
                        console.log(data);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
         }
    })

}

function openModal() {
    var modal = document.getElementById("myModal2");
    modal.style.display = "block";
    companies.forEach(id => {
        let company = document.getElementById(`cell${id}`)
        company.style.zIndex = '2';
         company.onclick = function () {
             if (!(pawns.includes(company))) {
                 company.style.background = 'rgba(0, 0, 0, 0.75)'
                 pawns.push(company)
                 document.querySelector('.unpawn').style.background = 'white'
                 let data = {
                     room_name: room_name,
                     cell: id
                 };

                 fetch('../../game/pawn/', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                         'X-CSRFToken': getCookie('csrftoken')
                     },
                     body: JSON.stringify(data)
                 })
                     .then(response => response.json())
                     .then(data => {
                         update_cell(data.message)
                         users_update()
                         console.log(data);
                     })
                     .catch(error => {
                         console.error('Error:', error);
                     });
             }
         }
    })
    window.onclick = function(event) {
    var modal = document.getElementById("myModal2");
    if (event.target === modal) {
        modal.style.display = "none";
         companies.forEach(id => {
        let company = document.getElementById(`cell${id}`)
        company.style.zIndex = '0';
        company.onclick = NaN;

    })
    }
}

}

function openModalBankrupt() {
    document.getElementById(`player${current_player}`).style.background = 'black';
    companies.forEach(function (pos){
        players_count--;
        const cell = document.getElementById(`cell${pos}`)
        cell.style.background = 'white'
        cell.title = ''
        get_cell(pos).then(data => {
             cell.children[1].children[1].children[0].innerText = data.buy_cost
        })

    })
}

function openModalUnPawn() {
    var modal = document.getElementById("myModal2");
    modal.style.display = "block";
    companies.forEach(id => {
        let company = document.getElementById(`cell${id}`)
        company.style.zIndex = '2';
         company.onclick = function () {


            if ((pawns.includes(company))){
                console.log(company)
                pawns = pawns.filter(element => element !== company);
                company.style.background = 'rgba(0, 0, 0, 0)'
             let data = {
                    room_name: room_name,
                    cell: id
                     };
                fetch('../../game/unpawn/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': getCookie('csrftoken')
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(data => {
                        update_cell(data.message)
                        users_update()
                        console.log(data);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        }
    })
}
function openModalDeal() {
    const open_modal = document.getElementById("myModal2");
    open_modal.style.display  = 'block'
    const modal = document.getElementById("deal");
    const close = document.querySelector('.deal-close');
    const inputText1 = document.getElementById('deal-input1');
    const inputText2 = document.getElementById('deal-input2');
    const button = document.querySelector('.deal-btn');
    const my_companies = document.querySelector('.deal-company');
    const no_my_companies = document.querySelectorAll('.deal-company')[1];
    const enemy_name = document.querySelector('.deal-enemy');
    let left_sum = 0;
    let right_sum = 0;
    let choosen_company1 = [];
    let choosen_company2 = [];
    let enemy_company = []

    inputText1.addEventListener('input', displayText1);
    inputText2.addEventListener('input', displayText2);

    let players = document.querySelectorAll('.player');

    players.forEach(user => {
        if (player_id !== user.id.slice(6)) user.style.zIndex = '2';
        user.addEventListener('click', userClick);
    });

    close.addEventListener('click', closeModal);

    button.addEventListener('click', function () {
        modal.style.display = 'none';
        removeEventListeners();

        const content = my_companies.textContent;
        const content2 = no_my_companies.textContent;

        const dataEnemyCells = Array.from(enemy_company).map(company => company.id);
        // const dataUserCells = Array.from(companies);
        chatSocket.send(JSON.stringify({
            'type': 'deal_suggest',
            'player': current_player,
            'enemy': enemy_color,
            'my_money': inputText1.value,
            'enemy_money': inputText2.value,
            'all_my_money':document.querySelector('.deal-money-left').textContent,
            'all_enemy_money':document.querySelector('.deal-money-right').textContent,
            'my_companies':companies,
            'enemy_companies':dataEnemyCells,
        }));
        // chatSocket.send(`7 ${enemy_color} ${content.replace(/\s/g, '') || 'x'}
        //     ${content2.replace(/\s/g, '') || 'x'} ${inputText1.value !== '' ? inputText1.value : '0'}
        //     ${inputText2.value !== '' ? inputText2.value : '0'} ${document.querySelector('.deal-money-left').textContent}
        //     ${document.querySelector('.deal-money-right').textContent}
        //     ${dataUserCells.length !== 0 ? dataUserCells : '0'}
        //     ${dataEnemyCells.length !== 0 ? dataEnemyCells : '0'}`);
    });



    function displayText1() {
        this.value = this.value.replace(/[^0-9]/g, '');
        document.querySelector('.deal-money-left').textContent = (left_sum + parseInt(this.value)) ?(left_sum + parseInt(this.value)) : left_sum ;
    }
    function displayText2() {
        this.value = this.value.replace(/[^0-9]/g, '');
        document.querySelector('.deal-money-right').textContent = (right_sum + parseInt(this.value)) ?(right_sum + parseInt(this.value)) : right_sum ;
    }

    function userClick() {
            enemy_color = this.id.slice(6)
             enemy_companies = document.querySelectorAll('.div1')
            enemy_companies.forEach(company => {
                if (company.title===enemy_color) enemy_company.push(company)
            })
            enemy_name.innerText = this.children[1].innerText
            open_modal.style.display = 'none'
            modal.style.display = "block";
             event()
            this.removeEventListener('click', userClick)
        }

    function closeModal() {
        modal.style.display = 'none';
        removeEventListeners();
    }

    function removeEventListeners() {
        companies.forEach(id => {
            let company = document.getElementById(`cell${id}`);
            company.removeEventListener('click', dealUser);
        });

        enemy_company.forEach(company => {
            company.removeEventListener('click', dealEnemy);
        });
    }

    function dealUser(){
            if (!choosen_company1.includes(this)) {
                 console.log(this.children[1])
                console.log(this.children[1].style.backgroundImage)
                const div = document.createElement("div")
                const container = document.createElement("div")
                const name = document.createElement("div")
                const price = document.createElement("div")
                const container_small = document.createElement("div")
                container_small.style.display = 'flex'
                div.style.backgroundImage = this.children[1].style.backgroundImage.replace(' rotated', '')
                div.style.height  ='45px'
                div.style.width  ='200px'
                get_cell(parseInt(this.id.slice(4))).then(data=> {
                     name.innerText = data.name
                    price.innerText = data.buy_cost
                    container.appendChild(name)
                    container.appendChild(price)
                    container_small.appendChild(div)
                    container_small.appendChild(container)
                    my_companies.appendChild(container_small)
                    left_sum = parseInt(left_sum) + data.buy_cost;
                    document.querySelector('.deal-money-left').textContent = (parseInt(inputText1.textContent) || 0) + data.buy_cost;
                    choosen_company1.push(this)
                })

            }
            else {
                get_cell(parseInt(this.id.slice(4))).then(data=> {
                    my_companies.children[choosen_company1.indexOf(this)].remove()
                    choosen_company1 = choosen_company1.filter(element => element !== this);
                    left_sum = parseInt(left_sum) - data.buy_cost;
                    document.querySelector('.deal-money-left').textContent = parseInt(document.querySelector('.deal-money-left').textContent) - data.buy_cost;
                })
            }

        }

    function dealEnemy(){
            const div = document.createElement("div")
                const container = document.createElement("div")
                const name = document.createElement("div")
                const price = document.createElement("div")
                const container_small = document.createElement("div")
                container_small.style.display = 'flex'
                div.style.backgroundImage = this.children[1].style.backgroundImage.replace(' rotated', '')
                div.style.height  ='45px'
                div.style.width  ='200px'
            get_cell(parseInt(this.id.slice(4))).then(data=> {
                if (!choosen_company2.includes(this)) {
                     name.innerText = data.name
                    price.innerText = data.buy_cost
                    container.appendChild(name)
                    container.appendChild(price)
                    container_small.appendChild(div)
                    container_small.appendChild(container)
                    no_my_companies.appendChild(container_small)
                    // no_my_companies.appendChild(div)
                    document.querySelector('.deal-money-right').textContent = (parseInt(inputText2.textContent) || 0) + data.buy_cost;
                    choosen_company2.push(this)
                } else {
                    no_my_companies.children[choosen_company2.indexOf(this)].remove()
                    choosen_company2 = choosen_company2.filter(element => element !== this);
                }
            })
        }

                function event () {
            companies.forEach(id => {
        let company = document.getElementById(`cell${id}`)
        company.style.zIndex='2';
        company.addEventListener('click', dealUser)
    })
    enemy_company.forEach(company => {
        company.style.zIndex='2';
        company.addEventListener('click', dealEnemy)
    })
        }
}

document.getElementById('btn-auction').onclick = function () {
    document.getElementById('myModal').style.display = 'none';
    document.getElementById('auction').style.display = 'block';
    auction_players = []
    for (let i=0;i<players_count;i++) auction_players.push(i)
     document.getElementById('auction').style.display = 'none';
    chatSocket.send(JSON.stringify({
        'type': 'auction',
        'target': (current_player+1)%players_count,
        'auction_players': auction_players,
        'cell':players_positions[current_player]-1,
        'auction_players_count':0,
        'price': parseInt(document.getElementById(`cell${players_positions[current_player]-1}`).children[1].children[1].children[0].innerText)
    }));
    // chatSocket.send(`9 ${absdiv(current_player+1, players_count)} ${document.getElementById(`cell${pos-1}`).children[1].children[1].children[0].innerText} ${auction_players} x ${pos-1}`)


}
// function openModalDeal() {
//     let open_modal = document.getElementById("myModal2");
//     open_modal.style.display = 'block'
//     let users =document.querySelectorAll('.player')
//     let enemy_name = document.querySelector('.deal-enemy')
//     let enemy_color
//     let enemy_companies
//     let enemy_company = []
//     let modal = document.getElementById("deal");
//     let left_sum = 0;
//     let right_sum = 0;
//     users.forEach(user => {
//         if (player_id!==user.id.slice(6)) user.style.zIndex = '2';
//         user.addEventListener('click', user_click)})
//         function user_click() {
//             enemy_color = this.id.slice(6)
//              enemy_companies = document.querySelectorAll('.div1')
//             enemy_companies.forEach(company => {
//                 if (company.title===enemy_color) enemy_company.push(company)
//             })
//             enemy_name.innerText = this.children[1].innerText
//             open_modal.style.display = 'none'
//             modal.style.display = "block";
//              event()
//             this.removeEventListener('click', user_click)
//         }
//         function displayText1() {
//         this.value = this.value.replace(/[^0-9]/g, '');
//         document.querySelector('.deal-money-left').textContent = (left_sum + parseInt(this.value)) ?(left_sum + parseInt(this.value)) : left_sum ;
//     }
//     function displayText2() {
//         this.value = this.value.replace(/[^0-9]/g, '');
//         document.querySelector('.deal-money-right').textContent = (right_sum + parseInt(this.value)) ?(right_sum + parseInt(this.value)) : right_sum ;
//     }
//
//
//      const close = document.querySelector('.deal-close')
//     let my_companies = document.querySelector('.deal-company');
//      let no_my_companies = document.querySelectorAll('.deal-company')[1];
//      let choosen_company1 = []
//      let choosen_company2 = []
//     const inputText1 = document.getElementById('deal-input1')
//     inputText1.addEventListener('input', displayText1)
//     const inputText2 = document.getElementById('deal-input2');
//     inputText2.addEventListener('input', displayText2)
//     let players = document.querySelectorAll('.player')
//     function deal_user(){
//             if (!choosen_company1.includes(this)) {
//                  console.log(this.children[1])
//                 console.log(this.children[1].style.backgroundImage)
//                 const div = document.createElement("div")
//                 const container = document.createElement("div")
//                 const name = document.createElement("div")
//                 const price = document.createElement("div")
//                 const container_small = document.createElement("div")
//                 container_small.style.display = 'flex'
//                 div.style.backgroundImage = this.children[1].style.backgroundImage.replace(' rotated', '')
//                 div.style.height  ='45px'
//                 div.style.width  ='200px'
//                 get_cell(parseInt(this.id.slice(4))).then(data=> {
//                      name.innerText = data.name
//                     price.innerText = data.buy_cost
//                     container.appendChild(name)
//                     container.appendChild(price)
//                     container_small.appendChild(div)
//                     container_small.appendChild(container)
//                     my_companies.appendChild(container_small)
//                     left_sum = parseInt(left_sum) + data.buy_cost;
//                     document.querySelector('.deal-money-left').textContent = (parseInt(inputText1.textContent) || 0) + data.buy_cost;
//                     choosen_company1.push(this)
//                 })
//
//             }
//             else {
//                 get_cell(parseInt(this.id.slice(4))).then(data=> {
//                     my_companies.children[choosen_company1.indexOf(this)].remove()
//                     choosen_company1 = choosen_company1.filter(element => element !== this);
//                     left_sum = parseInt(left_sum) - data.buy_cost;
//                     document.querySelector('.deal-money-left').textContent = parseInt(document.querySelector('.deal-money-left').textContent) - data.buy_cost;
//                 })
//             }
//
//         }
//         function deal_enemy(){
//
//             get_cell(parseInt(this.id.slice(4))).then(data=> {
//                 if (!choosen_company2.includes(this)) {
//                     const div = document.createElement("div")
//                     div.innerText = data.name + data.buy_cost
//                     no_my_companies.appendChild(div)
//                     document.querySelector('.deal-money-right').textContent = (parseInt(inputText2.textContent) || 0) + data.buy_cost;
//                     choosen_company2.push(this)
//                 } else {
//                     no_my_companies.children[choosen_company2.indexOf(this)].remove()
//                     choosen_company2 = choosen_company2.filter(element => element !== this);
//                 }
//             })
//         }
//
//         function event () {
//         console.log(companies, enemy_company)
//             companies.forEach(id => {
//         let company = document.getElementById(`cell${id}`)
//         company.style.zIndex='2';
//         company.addEventListener('click', deal_user)
//     })
//     enemy_company.forEach(company => {
//         company.style.zIndex='2';
//         company.addEventListener('click', deal_enemy)
//     })
//         }
//          close.onclick = function () {
//         modal.style.display = 'none'
//               companies.forEach(id => {
//                   let company = document.getElementById(`cell${id}`)
//                   company.removeEventListener('click', deal_user)
//               })
//              enemy_company.forEach(company => {
//         company.removeEventListener('click', deal_enemy)
//     })
//     }
//     const button = document.querySelector('.deal-btn')
//     button.addEventListener('click', function () {
//         modal.style.display = 'none'
//         companies.forEach(id => {
//                   let company = document.getElementById(`cell${id}`)
//                   company.removeEventListener('click', deal_user)
//               })
//              enemy_company.forEach(company => {
//         company.removeEventListener('click', deal_enemy)
//     })
//         const content = document.querySelector('.deal-company').innerHTML
//         const content2 = document.querySelectorAll('.deal-company')[1].innerHTML
//         let data_enemy_cells = []
//         for (let i in enemy_company)  data_enemy_cells.push(enemy_company[i].id)
//         let data_user_cells = []
//         for (let i in companies)  data_user_cells.push(companies[i])
//         console.log(enemy_color)
//         chatSocket.send(`7 ${enemy_color} ${content.replace(/\s/g, '') ? content : 'x'}
//         ${content2.replace(/\s/g, '') ? content2 : 'x'} ${inputText1.value!=='' ? inputText1.value : '0'}
//          ${inputText2.value!=='' ? inputText2.value : '0'} ${document.querySelector('.deal-money-left').textContent}
//           ${document.querySelector('.deal-money-right').textContent}
//             ${data_user_cells!==[] ? data_user_cells : '0'}
//              ${data_enemy_cells!==[] ? data_enemy_cells : '0'}`)
//
//     })
//   }

function casino() {
    const modal = document.getElementById("casino");
    modal.style.display = 'block'
    const checkboxes = document.querySelectorAll('.casino-checkbox');
    const winMoney = document.querySelector('.casino-win');
    const casinoYesButton = document.querySelector('.casino-yes');
    casinoYesButton.disabled = true;
    let countChecked = 0;
    let checked = [];
    casinoYesButton.disabled = 1000 < parseInt(player_money.innerText);


     function updateWinMoney() {
        let winnings = 0;
        if (countChecked === 1) winnings = 6000;
        else if (countChecked === 2) winnings = 3000;
        else if (countChecked === 3) winnings = 2000;

        // Ensure that winnings cannot be set to 0
        winMoney.innerText = winnings > 0 ? winnings : 0;

        // Enable or disable the "casino-yes" button based on whether at least one die is selected
        casinoYesButton.disabled = countChecked === 0;
    }

    function change() {
        if (this.checked) {
            countChecked++;
            checked.push(this.value);
            if (countChecked > 3) {
                this.checked = false;
                countChecked--;
                checked = checked.filter(element => element !== this.value);
            }
        } else {
            countChecked--;
            checked = checked.filter(element => element !== this.value);
        }
        updateWinMoney();
    }

    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', change);
    });

    function resetModal() {
        modal.style.display = 'none';
        checkboxes.forEach(checkbox => {
            checkbox.checked = false;
            checkbox.removeEventListener('change', change);
        });
        winMoney.innerText = 0;
    }

    document.querySelector('.casino-no').onclick = function () {
        resetModal();
        chatSocket.send(JSON.stringify({
            'type': 'chat_message',
            'message': `${current_player} отказался играть`
        }));
    };

    document.querySelector('.casino-yes').onclick = function () {
        let winning = -1000;
        const randomDice = getRandomInt(1, 6);
        console.log(checked, randomDice);
        if (checked.includes(`${randomDice}`)) winning = parseInt(winMoney.innerText);

        const data = {
            'active': parseInt(document.getElementById(`player${current_player}`).children[2].innerText) + winning,
        };

        const message = winning > 0 ? `выиграл ${winning}` : 'проебал 1000';

        chatSocket.send(JSON.stringify({
            'type': 'chat_message',
            'message': message,
            'next_player': true
        }));

        fetch(`http://127.0.0.1:8000/api/players/${player_id}/`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            console.log(data);
        })
        .catch(error => {
            console.error('Error:', error);
        });

        resetModal();
    };
}


function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}


// function dice_animation(number1, number2) {
//     const dice1 = document.getElementById('dice1');
//     const dice2 = document.getElementById('dice2');
//     dice1.textContent = number1
//     dice2.textContent = number2
//     dice1.classList.add('roll-animation');
//     dice2.classList.add('roll-animation');
//     setTimeout(() => {
//     dice1.classList.remove('roll-animation');
//     dice2.classList.remove('roll-animation');
// }, 1000);
// }



document.getElementById('rollButton').addEventListener('click', function() {
    const dices =[2, 2];
    chatSocket.send(JSON.stringify({
        'type':'move_player',
        'message':current_player,
        // 'dices':[getRandomInt(1,6), getRandomInt(1,6)]
                'dices':dices
        }));
    if (dices[0]===dices[1] && !in_prison) {
            count_doubles++;
            if (count_doubles===3) {
                in_prison=true
                setTimeout(function (){
                    chatSocket.send(JSON.stringify({
             'type':'prison',
             'player':current_player}));
                }, 1000)
                count_doubles=0
                setTimeout(function (){
                     if (player_number===current_player) chatSocket.send(JSON.stringify({
                    'type': 'chat_message',
                    'message': `${player_number} выбросил 3 дубля подряд и попал в тюрьму`,
                    'next_player': true
                }));
                }, 1000)
            }
        }
        else {
            count_doubles = 0;
        }
         if (!in_prison || (in_prison && dices[0]===dices[1]) || count_roll_in_prison===3) {
            if (in_prison && dices[0]===dices[1]) {
                if (player_number===current_player)chatSocket.send(JSON.stringify({
                    'type': 'chat_message',
                    'message': `${player_number} выбросил дубль  и выходит из тюрьмы`,
                }));
            }
            in_prison=false
            count_roll_in_prison = 0
        //     chatSocket.send(JSON.stringify({
        // 'type':'move_player',
        // 'message':current_player,
        // // 'dices':[getRandomInt(1,6), getRandomInt(1,6)]
        //         'dices':dices
        // }));
        }
        else {
            count_roll_in_prison++
            dice_animation(dices[0], dices[1])
        }

    setTimeout(function (){
        console.log('abc')
       if (!in_prison)  choice()
    }, 1500)
})




 const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                let cell_pos = absdiv(players_positions[current_player] - 1, 40)
                try {
                     document.getElementById('buy').disabled = parseInt(document.getElementById(`cell${cell_pos}`).children[1].children[1].children[0].innerText) > parseInt(player_money.innerText)
                }
                catch (TypeError) {
                    console.log('OK')
                }

            });
        });
const config = { childList: true, subtree: true, characterData: true };

observer.observe(player_money, config);
function choice() {
     let cell_pos = absdiv(players_positions[current_player] - 1, 40)
     let cell = document.getElementById(`cell${cell_pos}`);
     const buy_btn = document.getElementById('buy')
     if (cell.title && cell.title!==`${current_player}`) {

        pay_rent(cell_pos)
    }
    else if (!cell.classList.contains("special-cell") && cell_pos !== 30) {
        document.getElementById('myModal').style.display = 'block';
        buy_btn.onclick = function () {
        let pawn = document.querySelector(".pawn")
        companies.push(cell_pos);
        pawn.style.background = "white";

            buy_company(cell_pos)
            // companies.push(cell);
            // let pawn = document.querySelector(".pawn")
            // pawn.style.background = "white";
            // if (cell<0) cell=39;
        }}
       else if (cell_pos===20) casino();
       else if (cell_pos===30) {
           in_prison = true;
           chatSocket.send(JSON.stringify({
             'type':'prison',
             'player':current_player}));
     }
        else if (cell_pos!==0){
            random_cell()
        }

    // chatSocket.send(JSON.stringify({
    //      'type':'display_window',
    //      'player':(current_player+1)%players_count}));

}

function random_cell() {
            let prize = [-1000,1000][getRandomInt(0,1)]
            let data = {
                'active': parseInt(document.getElementById(`player${current_player}`).children[2].innerText)+prize,
            };
            let message = prize > 0 ?  'выиграл 1000' : 'проебал 1000'
            chatSocket.send(JSON.stringify({
            'type':'chat_message',
            'message':message,
                'next_player': true
            }));
            fetch(`http://127.0.0.1:8000/api/players/${player_id}/`,{
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken'),
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Update successful:', data);
                }).catch(error => {
                console.error('Error:', error);
            });
}

function buy_company(cell_pos) {
    document.querySelector('.menu').style.display = player_number===current_player ? 'block' : 'none'
    chatSocket.send(JSON.stringify({
                'type': 'buy_company',
                'cell_pos': cell_pos,
            }));
            document.getElementById('myModal').style.display = 'none';
            let data = {
                cell: cell_pos,
                room_name: room_name,
            };
            fetch(`http://127.0.0.1:8000/game/buy_company/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken'),
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    chatSocket.send(JSON.stringify({
                        'type': 'chat_message',
                        'message': `${player_number} купил`,
                        'next_player': true
                    }));
                    // document.getElementById(`cell${cell}`).style.background = colors[current_player]
                    if (data.cells) data.cells.split(' ').forEach(id => {
                        update_cell(id);
                    })
                    monopoly = []
                if (data.message) for (let i in data.message.split(' ')) monopoly.push(parseInt(data.message.split(' ')[i]))
                console.log(monopoly)
                if (monopoly.length>0) {
                document.querySelector('.build').style.background = 'white';
        }
                    console.log('Update successful:', data);

                }).catch(error => {
                console.error('Error:', error);
            });
}



function pay_rent(cell_pos) {
    document.getElementById('myModal').style.display = 'none';
    const modal = document.getElementById('modal-pay')
    modal.style.display = 'block'
    const pay_btn = document.querySelector('.pay-btn')
    pay_btn.disabled = parseInt(document.getElementById(`cell${cell_pos}`).children[1].children[1].children[0].innerText) > parseInt(player_money.innerText)
    pay_btn.addEventListener('click', function () {
        modal.style.display = 'none'
         let data = {
        'active': parseInt(document.getElementById(`player${current_player}`).children[2].innerText)-
             parseInt(document.getElementById(`cell${cell_pos}`).children[1].children[1].children[0].innerText)
    };

    fetch(`http://127.0.0.1:8000/api/players/${player_id}/`,{
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        console.log(data);
        chatSocket.send(JSON.stringify({
        'type':'chat_message',
            'next_player': true,
        'message':`${current_player} заплатил аренду`}));
    })
    .catch(error => {
        console.error('Error:', error);
    });
    })
}


async function move_player(dices) {
  const chip = document.getElementById(`chip${current_player + 1}`);
  const dice1 = dices[0];
  const dice2 = dices[1];
  //   const dice1 = 2;
  // const dice2 = 2;
  dice_animation(dice1,dice2)
  let current_pos = players_positions[current_player] % 40;
  let pos = current_pos + dice1 + dice2;
  players_positions[current_player] = pos;
  if (current_pos < 0) current_pos += 40;
  chip.style.transform = `translate(0px, 0px)`;

  let elementToMoveRect = chip.getBoundingClientRect();
  const computedStyles = window.getComputedStyle(chip);
  const transformValue = computedStyles.getPropertyValue('transform');
  const matrix = new DOMMatrix(transformValue);
  const translateX = matrix.m41;
  const translateY = matrix.m42;
  let startX = elementToMoveRect.left - translateX + elementToMoveRect.width / 2;
  let startY = elementToMoveRect.top - translateY + elementToMoveRect.height / 2;

  for (let i = current_pos; i < pos; i++) {
      if (i===40) money_for_round();
    let targetRect = document.getElementById(`cell${i % 40}`).getBoundingClientRect();
    // Вычисляем центр элемента, к которому будем перемещать
    let targetCenterX = targetRect.left + targetRect.width / 2;
    let targetCenterY = targetRect.top + targetRect.height / 2;

    let deltaX = targetCenterX - startX;
    let deltaY = targetCenterY - startY;

    chip.style.transition = 'transform 0.3s ease-in-out';
    chip.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

    // Добавляем задержку между анимациями
    await new Promise(resolve => setTimeout(resolve, 150));
  }

}


function money_for_round() {
    console.log(parseInt(document.getElementById(`player${current_player}`).children[2].innerText)+1000)
    const dataToUpdate = {
    // Your updated data here
    'active': parseInt(document.getElementById(`player${current_player}`).children[2].innerText)+1000,
};
    fetch(`http://127.0.0.1:8000/api/players/${player_id}/`,{
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken'),
        },
        body: JSON.stringify(dataToUpdate),})
    .then(response => response.json())
    .then(data => {
        console.log('Update successful:', data);
    }).catch(error => {
        console.error('Error:', error);
    });
}





document.querySelector('.btn').onclick = function () {
    console.log(get_cell(1));
}
// const dataToUpdate = {
//     'name': 'room1',
//     'round': 100,
//     'players_count': 4,
// };
//
// console.log(dataToUpdate);
//
// fetch(`http://127.0.0.1:8000/api/rooms/${222}/`, {
//     method: 'PUT',
//     headers: {
//         'Content-Type': 'application/json',
//         'X-CSRFToken': getCookie('csrftoken'),
//     },
//     body: JSON.stringify(dataToUpdate),
// })
//     .then(response => response.json())
//     .then(data => {
//         console.log(data);
//     })
//     .catch(error => {
//         console.error('Error:', error);
//     });
// }








function users_update() {
    fetch(`http://127.0.0.1:8000/api/players/players_on_room/${room_name}`,{
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        }})
    .then(response => response.json())
    .then(data => {
        for (let i in data) {
            let player = document.getElementById(`player${i}`)
            player.children[1].innerText = data[i].username
            player.children[2].innerText = data[i].active
        }
    }).catch(error => {
        console.error('Error:', error);
    });
}











function update_cell(id) {
    fetch(`http://127.0.0.1:8000/api/cells/${id}/`,{
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        }})
    .then(response => response.json())
    .then(data => {
        let cell = document.getElementById(`cell${data.pos}`)
       cell.children[1].children[1].children[0].innerText = data.current_cost
    }).catch(error => {
        console.error('Error:', error);
    });
}

let dice = document.querySelectorAll('#dice');

function dice_animation(number1,number2) {
    let dice = document.querySelectorAll('#dice');
    dice[0].dataset.side = number1;
    dice[0].classList.toggle("reRoll");
    dice[1].dataset.side = number2;
    dice[1].classList.toggle("reRoll");

}

function start() {
    // document.getElementById(`player${0}`).style.backgroundColor = colors[0]
     fetch(`http://localhost:8000/api/cells/`,{
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        }})
    .then(response => response.json())
    .then(data => {
        document.querySelector('.menu').style.display = player_number===current_player ? 'block' : 'none'
        for (let i=0;i<players_count;i++) {
            players.push(i)
        }
        for (let i=0;i<40;i++){
            let cell = document.getElementById(`cell${i}`)
            if (!cell.classList.contains("special-cell")) {
                cell.children[0].innerText = data[i].name
                // cell.children[1].innerText = data[i].buy_cost
                cell.children[1].children[1].children[0].innerText = data[i].current_cost
                // cell.children[1].children[0].children[0].innerText = data[i].buy_cost / 2 + '$'
            }
        }
    }).catch(error => {
        console.error('Error:', error);
    });
}
